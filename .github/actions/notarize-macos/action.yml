name: Notarize the app (macOS)

inputs:
  APPLE_ID:
    required: true
  APPLE_PW:
    required: true
  DAILY:
    type: boolean
    required: false
  DEV_ID:
    required: true
  KEYCHAIN_PATH:
    required: true
  KEYCHAIN_PW:
    required: true
  SQLCIPHER:
    type: boolean
    required: true
  TEAM_ID:
    required: true

runs:
  using: 'composite'

  steps:
    - name: Unlock keychain
      env:
        KEYCHAIN_PATH: ${{ inputs.KEYCHAIN_PATH }}
        KEYCHAIN_PW: ${{ inputs.KEYCHAIN_PW }}
      shell: bash
      run: |
        security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"
    - name: Include the dependencies in the app bundle
      env:
        DEV_ID: ${{ inputs.DEV_ID }}
      shell: bash
      run: find build -name "DB Browser for SQL*.app" -exec /opt/homebrew/opt/db4subqt@5/bin/macdeployqt {} -sign-for-notarization="$DEV_ID" \;

    - name: Add the extension to the app bundle
      shell: bash
      run: |
        for TARGET in $(find build -name "DB Browser for SQL*.app" | sed -e 's/ /_/g'); do
          TARGET=$(echo $TARGET | sed -e 's/_/ /g')
          mkdir "$TARGET/Contents/Extensions"
          clang -I /opt/homebrew/opt/db4subsqlitefts@5/include -L /opt/homebrew/opt/db4subsqlitefts@5/lib -fno-common -dynamiclib src/extensions/extension-formats.c -o "$TARGET/Contents/Extensions/formats.dylib"
          clang -I /opt/homebrew/opt/db4subsqlitefts@5/include -L /opt/homebrew/opt/db4subsqlitefts@5/lib -fno-common -dynamiclib src/extensions/extension-functions.c -o "$TARGET/Contents/Extensions/math.dylib"

          if [ -f "$TARGET/Contents/Extensions/formats.dylib" ]; then
            install_name_tool -id "@executable_path/../Extensions/formats.dylib" "$TARGET/Contents/Extensions/formats.dylib"
            ln -s formats.dylib "$TARGET/Contents/Extensions/formats.dylib.dylib"
          fi
          if [ -f "$TARGET/Contents/Extensions/math.dylib" ]; then
            install_name_tool -id "@executable_path/../Extensions/math.dylib" "$TARGET/Contents/Extensions/math.dylib"
            ln -s math.dylib "$TARGET/Contents/Extensions/math.dylib.dylib"
          fi

          curl -L -o src/extensions/fileio.c 'https://sqlite.org/src/raw?filename=ext/misc/fileio.c&ci=trunk'
          curl -L -o src/extensions/test_windirect.c 'https://sqlite.org/src/raw?filename=src/test_windirent.c&ci=trunk'
          curl -L -o src/extensions/test_windirect.h 'https://sqlite.org/src/raw?filename=src/test_windirent.h&ci=trunk'
          clang -I /opt/homebrew/opt/db4subsqlitefts@5/include -L /opt/homebrew/opt/db4subsqlitefts@5/lib -fno-common -dynamiclib src/extensions/fileio.c src/extensions/test_windirect.c -o "$TARGET/Contents/Extensions/fileio.dylib"

          if [ -f "$TARGET/Contents/Extensions/fileio.dylib" ]; then
            install_name_tool -id "@executable_path/../Extensions/fileio.dylib" "$TARGET/Contents/Extensions/fileio.dylib"
            ln -s fileio.dylib "$TARGET/Contents/Extensions/fileio.dylib.dylib"
          fi
        done

    - name: Copy the license file to the app bundle
      shell: bash
      run: |
        for TARGET in $(find build -name "DB Browser for SQL*.app" | sed -e 's/ /_/g'); do
          TARGET=$(echo $TARGET | sed -e 's/_/ /g')
          cp LICENSE "$TARGET/Contents/Resources/"
          cp LICENSE-PLUGINS "$TARGET/Contents/Resources/"
        done

    - name: Copy the translation files to the app bundle
      shell: bash
      run: |
        for TARGET in $(find build -name "DB Browser for SQL*.app" | sed -e 's/ /_/g'); do
          TARGET=$(echo $TARGET | sed -e 's/_/ /g')
          mkdir "$TARGET/Contents/translations"
          for i in ar cs de en es fr it ko pl pt pt_BR ru uk zh_CN zh_TW; do
            find /opt/homebrew/opt/db4subqt@5/translations -name "qt_${i}.qm" 2> /dev/null -exec cp -v {} "$TARGET/Contents/translations/" \;
            find /opt/homebrew/opt/db4subqt@5/translations -name "qtbase_${i}.qm" 2> /dev/null -exec cp -v {} "$TARGET/Contents/translations/" \;
            find /opt/homebrew/opt/db4subqt@5/translations -name "qtmultimedia_${i}.qm" 2> /dev/null -exec cp -v {} "$TARGET/Contents/translations/" \;
            find /opt/homebrew/opt/db4subqt@5/translations -name "qtscript_${i}.qm" 2> /dev/null -exec cp -v {} "$TARGET/Contents/translations/" \;
            find /opt/homebrew/opt/db4subqt@5/translations -name "qtxmlpatterns_${i}.qm" 2> /dev/null -exec cp -v {} "$TARGET/Contents/translations/" \;
          done 
        done

    - name: Copy the icon file to the app bundle
      env:
        DAILY: ${{ inputs.DAILY }}
      shell: bash
      run: |
        for TARGET in $(find build -name "DB Browser for SQL*.app" | sed -e 's/ /_/g'); do
          TARGET=$(echo $TARGET | sed -e 's/_/ /g')
          if [ "${{ inputs.DAILY }}" = "false" ]; then
            cp installer/macos/macapp.icns "$TARGET/Contents/Resources/"
            /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile macapp.icns" "$TARGET/Contents/Info.plist"
          else
            cp installer/macos/macapp-nightly.icns "$TARGET/Contents/Resources/"
            /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile macapp-nightly.icns" "$TARGET/Contents/Info.plist"
          fi
        done

    - name: Sign the manually added extensions.
      env:
        DEV_ID: ${{ inputs.DEV_ID }}
      shell: bash
      run: |
        for TARGET in $(find build -name "DB Browser for SQL*.app" | sed -e 's/ /_/g'); do
          TARGET=$(echo $TARGET | sed -e 's/_/ /g')
          codesign --sign "$DEV_ID" --deep --force --options=runtime --strict --timestamp "$TARGET/Contents/Extensions/fileio.dylib"
          codesign --sign "$DEV_ID" --deep --force --options=runtime --strict --timestamp "$TARGET/Contents/Extensions/formats.dylib"
          codesign --sign "$DEV_ID" --deep --force --options=runtime --strict --timestamp "$TARGET/Contents/Extensions/math.dylib"
          codesign --sign "$DEV_ID" --deep --force --options=runtime --strict --timestamp "$TARGET"
        done

    - name: Move app bundle to installer folder for DMG creation
      shell: bash
      run: mv build/*.app installer/macos

    # TODO: I originally tried to break it into two steps to make it more readable,
    # but Composite Actions do not support if statements for steps.
    # For more information, see https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md
    - name: Create the DMG
      env:
        DAILY: ${{ inputs.DAILY }}
        DEV_ID: ${{ inputs.DEV_ID }}
      shell: bash
      run: |
        export DATE=$(date +%Y%m%d)

        if [ "${{ inputs.SQLCIPHER }}" = "1" ]; then
          if [ "${{ inputs.DAILY }}" = "false" ]; then
            # Continuous with SQLCipher
            sed -i "" 's/"DB Browser for SQLCipher Nightly.app"/"DB Browser for SQLCipher-3.13.0-rc1.app"/' installer/macos/sqlcipher-nightly.json
            TARGET="DB.Browser.for.SQLCipher-3.13.0-rc1.dmg"
            appdmg --quiet installer/macos/sqlcipher-nightly.json "$TARGET"
            codesign --sign "$DEV_ID" --verbose --options=runtime --timestamp "$TARGET"
            codesign -vvv --deep --strict --verbose=4 "$TARGET"
          else
            # Daily with SQLCipher
            TARGET="DB.Browser.for.SQLCipher-universal_$DATE.dmg"
            appdmg --quiet installer/macos/sqlcipher-nightly.json "$TARGET"
            codesign --sign "$DEV_ID" --verbose --options=runtime --timestamp "$TARGET"
            codesign -vvv --deep --strict --verbose=4 "$TARGET"
          fi
        else
          if [ "${{ inputs.DAILY }}" = "false" ]; then
            # Continuous without SQLCipher
            sed -i "" 's/"DB Browser for SQLite Nightly.app"/"DB Browser for SQLite-3.13.0-rc1.app"/' installer/macos/nightly.json
            TARGET="DB.Browser.for.SQLite-3.13.0-rc1.dmg"
            appdmg --quiet installer/macos/nightly.json "$TARGET"
            codesign --sign "$DEV_ID" --verbose --options=runtime --timestamp "$TARGET"
            codesign -vvv --deep --strict --verbose=4 "$TARGET"
          else
            # Daily without SQLCipher
            TARGET="DB.Browser.for.SQLite-universal_$DATE.dmg"
            appdmg --quiet installer/macos/nightly.json "$TARGET"
            codesign --sign "$DEV_ID" --verbose --options=runtime --timestamp "$TARGET"
            codesign -vvv --deep --strict --verbose=4 "$TARGET"
          fi
        fi

    - name: Notarize the dmg
      env:
        APPLE_ID: ${{ inputs.APPLE_ID }}
        APPLE_PW: ${{ inputs.APPLE_PW }}
        TEAM_ID: ${{ inputs.TEAM_ID }}
      shell: bash
      run: xcrun notarytool submit *.dmg --apple-id "$APPLE_ID" --password "$APPLE_PW" --team-id "$TEAM_ID" --wait

    - name: Staple the notarization ticket
      shell: bash
      run: xcrun stapler staple *.dmg
